datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Song {
  id       Int     @id @default(autoincrement())
  name     String
  artist   Artist? @relation(fields: [artistId], references: [id])
  artistId Int?
}

model Artist {
  id    Int    @id @default(autoincrement())
  name  String @unique
  songs Song[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?     @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
    
  feedbacks Feedback[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feedback {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  tags        String[]
  author      User           @relation(fields: [authorId], references: [id])
  authorId    String
  steps       FeedbackStep[]
}

enum FeedbackStepType {
  INTENTION
  OBSERVATION
  IMPACT
  PLEA
}

model FeedbackStep {
  id         Int              @id @default(autoincrement())
  content    String
  type       FeedbackStepType
  feedback   Feedback         @relation(fields: [feedbackId], references: [id])
  feedbackId Int
  @@unique ([feedbackId, type])
}
